name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  # Go Backend Tests
  go-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: telegram_emulator
          POSTGRES_USER: telegram_emulator
          POSTGRES_DB: telegram_emulator
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
        
    - name: Install Go dependencies
      run: |
        go mod download
        go mod verify
        
    - name: Run Go linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.59.1
        
    - name: Run Go tests
      run: |
        go test ./... -race -coverprofile=coverage.out -covermode=atomic
        
    - name: Upload Go coverage
      uses: codecov/codecov-action@v4
      with:
        file: coverage.out
        flags: go-backend
        name: go-backend-coverage
        
    - name: Build Go binary
      run: |
        go build -o bin/telegram-emulator ./cmd/emulator
        
  # React Frontend Tests
  react-frontend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd web
        npm ci
        
    - name: Run ESLint
      run: |
        cd web
        npm run lint
        
    - name: Run TypeScript type check
      run: |
        cd web
        npm run type-check
        
    - name: Run frontend tests
      run: |
        cd web
        npm run test:ci
        
    - name: Build frontend
      run: |
        cd web
        npm run build
        
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        file: web/coverage/lcov.info
        flags: react-frontend
        name: react-frontend-coverage

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [go-backend, react-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: telegram_emulator
          POSTGRES_USER: telegram_emulator
          POSTGRES_DB: telegram_emulator
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install dependencies
      run: |
        go mod download
        cd web && npm ci
        
    - name: Run integration tests
      run: |
        # Start backend
        go run ./cmd/emulator &
        BACKEND_PID=$!
        
        # Wait for backend to start
        sleep 10
        
        # Start frontend
        cd web && npm run dev &
        FRONTEND_PID=$!
        
        # Wait for frontend to start
        sleep 10
        
        # Run integration tests
        npm run test:integration
        
        # Cleanup
        kill $BACKEND_PID $FRONTEND_PID
        
  # Security Scan
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
