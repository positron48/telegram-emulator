name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
          
      - name: Install Go dependencies
        run: |
          go mod download
          go mod verify
          
      - name: Install frontend dependencies
        run: |
          cd web
          npm ci
          
      - name: Run all tests
        run: |
          # Go tests
          go test ./... -race -coverprofile=coverage.out -covermode=atomic
          
          # Frontend tests
          cd web
          npm run lint
          npm test --if-present
          
      - name: Build Go binary
        run: |
          go build -o bin/telegram-emulator ./cmd/emulator
          
      - name: Build frontend
        run: |
          cd web
          npm run build
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Upload Go binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/telegram-emulator
          asset_name: telegram-emulator-${{ github.ref_name }}-linux-amd64
          asset_content_type: application/octet-stream
          
      - name: Upload frontend build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./web/dist
          asset_name: frontend-${{ github.ref_name }}.zip
          asset_content_type: application/zip
          
      - name: Build Docker image
        run: |
          docker build -t telegram-emulator:${{ github.ref_name }} .
          docker save telegram-emulator:${{ github.ref_name }} | gzip > telegram-emulator-${{ github.ref_name }}.tar.gz
          
      - name: Upload Docker image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./telegram-emulator-${{ github.ref_name }}.tar.gz
          asset_name: telegram-emulator-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
