#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ Telegram Bot API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-telegram-bot
"""

import asyncio
import logging
from typing import Dict, Any, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞
BOT_TOKEN = "test-token-123"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —ç–º—É–ª—è—Ç–æ—Ä–µ
EMULATOR_URL = "http://localhost:3001"  # URL —ç–º—É–ª—è—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EmulatorBot:
    def __init__(self):
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm:yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm:no")
            ],
            [
                InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://example.com")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ Telegram API.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        
        await update.message.reply_text(text, reply_markup=reply_markup)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/keyboard - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/remove_keyboard - –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/force_reply - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
/entities - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è entities

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
‚Ä¢ –û–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
‚Ä¢ Callback queries
‚Ä¢ Message entities (–∫–æ–º–∞–Ω–¥—ã, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ö–µ—à—Ç–µ–≥–∏)
‚Ä¢ Force reply
        """
        
        await update.message.reply_text(help_text)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞")
    
    async def keyboard_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /keyboard"""
        keyboard = [
            ["üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["‚ùì –ü–æ–º–æ—â—å", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üîô –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", reply_markup=reply_markup)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
    
    async def remove_keyboard_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remove_keyboard"""
        reply_markup = ReplyKeyboardRemove()
        await update.message.reply_text("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=reply_markup)
        logger.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞")
    
    async def force_reply_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /force_reply"""
        reply_markup = ForceReply()
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:", reply_markup=reply_markup)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω force reply")
    
    async def entities_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /entities"""
        entities_text = """
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Message Entities:

1. –ö–æ–º–∞–Ω–¥—ã: /start /help /settings
2. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: @username @test_user
3. –•–µ—à—Ç–µ–≥–∏: #telegram #bot #api
4. URL: https://core.telegram.org/bots/api

–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å entities –≤ –æ—Ç–≤–µ—Ç–µ API.
        """
        
        await update.message.reply_text(entities_text)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è entities")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        
        user = query.from_user
        data = query.data
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç {user.first_name}: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback data
        if data == "confirm:yes":
            await query.edit_message_text("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ '–î–∞'!")
        elif data == "confirm:no":
            await query.edit_message_text("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ '–ù–µ—Ç'!")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        text = update.message.text
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if text.startswith('/'):
            response = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É: {text}\n–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å entity —Ç–∏–ø–∞ 'bot_command'."
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ —Ö–µ—à—Ç–µ–≥–æ–≤
            has_mention = '@' in text
            has_hashtag = '#' in text
            
            response = f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n"
            
            if has_mention:
                response += "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (@username)\n"
            if has_hashtag:
                response += "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ö–µ—à—Ç–µ–≥–∏ (#hashtag)\n"
            
            if not has_mention and not has_hashtag:
                response += "üìù –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        await update.message.reply_text(response)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    
    def setup_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("keyboard", self.keyboard_command))
        self.application.add_handler(CommandHandler("remove_keyboard", self.remove_keyboard_command))
        self.application.add_handler(CommandHandler("force_reply", self.force_reply_command))
        self.application.add_handler(CommandHandler("entities", self.entities_command))
        
        # Callback queries
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ Telegram API")
        logger.info("=" * 50)
        logger.info(f"üì° URL —ç–º—É–ª—è—Ç–æ—Ä–∞: {EMULATOR_URL}")
        logger.info(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN}")
        logger.info("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º base_url
        self.application = Application.builder().token(BOT_TOKEN).base_url(f"{EMULATOR_URL}/bot").build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        try:
            bot_info = await self.application.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç: {bot_info.first_name} (@{bot_info.username})")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
            return
        
        logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except KeyboardInterrupt:
            pass
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = EmulatorBot()
    await bot.run()

if __name__ == "__main__":
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            loop.close()
        except:
            pass
