package models

import (
	"time"
)

// Chat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ —ç–º—É–ª—è—Ç–æ—Ä–µ
type Chat struct {
	ID          int64     `json:"id" gorm:"primaryKey"`
	Type        string    `json:"type"` // private, group
	Title       string    `json:"title"`
	Username    string    `json:"username"`
	Description string    `json:"description"`
	Members     []User    `json:"members" gorm:"many2many:chat_members;"`
	LastMessage *Message  `json:"last_message" gorm:"foreignKey:ChatID"`
	UnreadCount int       `json:"unread_count"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// TableName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Chat
func (Chat) TableName() string {
	return "chats"
}

// ChatMember –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —á–∞—Ç–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
type ChatMember struct {
	ChatID   int64     `json:"chat_id" gorm:"primaryKey"`
	UserID   int64     `json:"user_id" gorm:"primaryKey"`
	JoinedAt time.Time `json:"joined_at"`
}

// TableName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–æ–¥–µ–ª–∏ ChatMember
func (ChatMember) TableName() string {
	return "chat_members"
}

// IsPrivate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
func (c *Chat) IsPrivate() bool {
	return c.Type == "private"
}

// IsGroup –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–π
func (c *Chat) IsGroup() bool {
	return c.Type == "group"
}



// GetChatIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —á–∞—Ç–∞
func (c *Chat) GetChatIcon() string {
	switch c.Type {
	case "private":
		return "üë§"
	case "group":
		return "üë•"
	default:
		return "üí¨"
	}
}

// GetChatTypeLabel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —á–∞—Ç–∞
func (c *Chat) GetChatTypeLabel() string {
	switch c.Type {
	case "private":
		return "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"
	case "group":
		return "–ì—Ä—É–ø–ø–∞"
	default:
		return "–ß–∞—Ç"
	}
}

// CanUserJoin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É
func (c *Chat) CanUserJoin() bool {
	return c.Type == "group"
}

// CanUserLeave –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç
func (c *Chat) CanUserLeave() bool {
	return c.Type == "group"
}

// IsUserMember –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
func (c *Chat) IsUserMember(userID int64) bool {
	for _, member := range c.Members {
		if member.ID == userID {
			return true
		}
	}
	return false
}

// AddMember –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
func (c *Chat) AddMember(user User) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	for _, member := range c.Members {
		if member.ID == user.ID {
			return
		}
	}
	c.Members = append(c.Members, user)
}

// RemoveMember —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
func (c *Chat) RemoveMember(userID int64) {
	for i, member := range c.Members {
		if member.ID == userID {
			c.Members = append(c.Members[:i], c.Members[i+1:]...)
			break
		}
	}
}
