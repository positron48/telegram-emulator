import { parseTelegramText, hasCommands, extractCommands } from './textParser.jsx';

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
// –î–ª—è –∑–∞–ø—É—Å–∫–∞: node textParser.test.js

const testCases = [
  {
    name: "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç",
    input: "–≠—Ç–æ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*",
    expected: "–≠—Ç–æ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç" // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  },
  {
    name: "–ö—É—Ä—Å–∏–≤",
    input: "–≠—Ç–æ _–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç_",
    expected: "–≠—Ç–æ –∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç"
  },
  {
    name: "–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç",
    input: "–≠—Ç–æ ~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~",
    expected: "–≠—Ç–æ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç"
  },
  {
    name: "–ö–æ–¥",
    input: "–≠—Ç–æ `–∫–æ–¥`",
    expected: "–≠—Ç–æ –∫–æ–¥"
  },
  {
    name: "–°—Å—ã–ª–∫–∞",
    input: "–≠—Ç–æ [—Å—Å—ã–ª–∫–∞](https://example.com)",
    expected: "–≠—Ç–æ —Å—Å—ã–ª–∫–∞"
  },
  {
    name: "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    input: "–≠—Ç–æ *–∂–∏—Ä–Ω—ã–π _—Å –∫—É—Ä—Å–∏–≤–æ–º_* —Ç–µ–∫—Å—Ç",
    expected: "–≠—Ç–æ –∂–∏—Ä–Ω—ã–π —Å –∫—É—Ä—Å–∏–≤–æ–º —Ç–µ–∫—Å—Ç"
  },
  {
    name: "–ö–æ–º–∞–Ω–¥–∞",
    input: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
    expected: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
  }
];

const commandTests = [
  {
    name: "–¢–µ–∫—Å—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π",
    input: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞",
    hasCommands: true,
    commands: ["/start"]
  },
  {
    name: "–¢–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥",
    input: "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥",
    hasCommands: false,
    commands: []
  },
  {
    name: "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
    input: "–ö–æ–º–∞–Ω–¥—ã: /start /help /stop",
    hasCommands: true,
    commands: ["/start", "/help", "/stop"]
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ React —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
const extractTextFromReactElements = (elements) => {
  if (!elements) return "";
  if (typeof elements === 'string') return elements;
  if (Array.isArray(elements)) {
    return elements.map(extractTextFromReactElements).join('');
  }
  if (elements.props && elements.props.children) {
    return extractTextFromReactElements(elements.props.children);
  }
  return "";
};

console.log("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è textParser...\n");

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parseTelegramText
console.log("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parseTelegramText:");
testCases.forEach((testCase, index) => {
  try {
    const result = parseTelegramText(testCase.input);
    const resultText = extractTextFromReactElements(result);
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    const passed = resultText.includes(testCase.expected.replace(/\*|_|~|`|\[.*?\]\(.*?\)/g, ''));
    
    console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${testCase.name}: ${passed ? 'PASS' : 'FAIL'}`);
    if (!passed) {
      console.log(`    –û–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected}`);
      console.log(`    –ü–æ–ª—É—á–µ–Ω–æ: ${resultText}`);
    }
  } catch (error) {
    console.log(`  ‚ùå ${testCase.name}: ERROR - ${error.message}`);
  }
});

console.log("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ hasCommands:");
commandTests.forEach((testCase) => {
  try {
    const result = hasCommands(testCase.input);
    const passed = result === testCase.hasCommands;
    
    console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${testCase.name}: ${passed ? 'PASS' : 'FAIL'}`);
    if (!passed) {
      console.log(`    –û–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.hasCommands}`);
      console.log(`    –ü–æ–ª—É—á–µ–Ω–æ: ${result}`);
    }
  } catch (error) {
    console.log(`  ‚ùå ${testCase.name}: ERROR - ${error.message}`);
  }
});

console.log("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ extractCommands:");
commandTests.forEach((testCase) => {
  try {
    const result = extractCommands(testCase.input);
    const passed = JSON.stringify(result) === JSON.stringify(testCase.commands);
    
    console.log(`  ${passed ? '‚úÖ' : '‚ùå'} ${testCase.name}: ${passed ? 'PASS' : 'FAIL'}`);
    if (!passed) {
      console.log(`    –û–∂–∏–¥–∞–ª–æ—Å—å: ${JSON.stringify(testCase.commands)}`);
      console.log(`    –ü–æ–ª—É—á–µ–Ω–æ: ${JSON.stringify(result)}`);
    }
  } catch (error) {
    console.log(`  ‚ùå ${testCase.name}: ERROR - ${error.message}`);
  }
});

console.log("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
